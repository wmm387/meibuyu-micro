<?php
/**
 * Created by PhpStorm.
 * User: %user%
 * Date: %date%
 * Time: %time%
 * Description:
 */

declare(strict_types=1);

namespace App\Repository\Eloquent;

use App\Model\%ModelClass%;
use App\Repository\Interfaces\%ModelClass%Repository;
use App\Validators\%ModelClass%Validator;
use Hyperf\DbConnection\Db;
use Meibuyu\Micro\Exceptions\HttpResponseException;
use Meibuyu\Micro\Repository\Eloquent\BaseRepository;

/**
 * Class %ModelClass%RepositoryEloquent
 * @package App\Repository\Eloquent;
 */
class %ModelClass%RepositoryEloquent extends BaseRepository implements %ModelClass%Repository
{

    /**
     * %ModelClass% 模型
     * @return mixed
     */
    public function model()
    {
        return %ModelClass%::class;
    }

    /**
     * 数据校验器
     * @return mixed
     */
    public function validator()
    {
        return %ModelClass%Validator::class;
    }

    /**
     * 获取数据列表
     * @return array
     */
    public function list(): array
    {
        $pageSize = (int)$this->request->input('page_size', DEFAULT_PAGE_SIZE);
        %list%
    }

    /**
     * 获取单条数据
     * @param $id
     * @return array
     */
    public function show($id): array
    {
        %show%
    }

    /**
     * 添加记录
     * @param array $attributes
     * @return bool
     */
    public function create(array $attributes): bool
    {
        Db::transaction(function () use ($attributes) {
            %create%
        });
        return true;
    }

    /**
     * 更新数据
     * @param array $attributes
     * @param $id
     * @return bool
     */
    public function update(array $attributes, $id): bool
    {
        Db::transaction(function () use ($attributes, $id) {
            %update%
        });
        return true;
    }

    /**
     * 删除单条数据
     * @param $id
     * @return bool
     * @throws HttpResponseException
     */
    public function delete($id): bool
    {
        //已用外键做级联删除 和 删除验证，不需要做逻辑验证
        return $this->find($id)->delete();
    }
    %rs%
}
